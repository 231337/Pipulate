# Beginning of Journal
--------------------------------------------------------------------------------
## Mon Nov 17 17:41:36 EST 2014

It's the end of the day now--5:40 PM and I really feel the difference already
of having a daily work journal directly in my repository. THIS is a better base
of operations - a command-line terminal with vim running - than a web browser
with infinite distractions. I love having my keyboard macro back for achieving
a sort of blog-like chronological ordering while still in a text file. It will
be the biggest part of the Pipulate project file-wise, but so what? It's like
the DNA of this project. It will be interesting for dissecting my thoughts
about my decisions if the project ever really gets so big that anyone cares. It
will stay inextricably interconnected with the code itself in a way that not
even the YouTube videos can. But it is key to my doing coding work during the
week in a documented fashion without having to do a YouTube video for every
commit.

Soon, my Dell Venue 8 Pro Kickstarted docking/charging station will arrive, and
I might even consider using that here at the office. It will be nice to have a
TOTALLY portable Windows system. If I set that up with a webserver and maybe a
custom hosts file, I could use it for offline development work in the Linus
Torvalds coding at 30,000 feet way--except of course, on the subway. Think
about having no web service connections to worry about breaking when testing
Pipulate! Wow, that will really help me polish the csv-file aspect (versus the
Google Spreadsheets mode).

One thing: I can't really remain pure about when I do commits and pushes. This
entry, for example, is going to have to be pushed before I leave, because it
would be ridiculous risking losing thought-work like this by not committing and
pushing from wherever I am at the end of the day.

And now a word about platform-independence! I used to think platform
independence existed so long as you could get a terminal window that you could
SSH from--and into whatever remote server you were ACTUALLY developing on. Now,
I believe in developing TRULY local on the very machine you're sitting down at.
Why let bandwidth and flakey connections be a bottleneck? Why not get the
benefit of the speed of the hardware you're sitting in front of? Only reason
not to is if it couldn't run your code just as well as anything else, and
that's no longer the case. Even Windows 7 makes a decent Linux / Python / vim
and git platform so long as you install MinGW -- and probably Cygwin would do
as well. But I chose MinGW because I got Pipulate running on it most easily. It
worked with the main Python distribution which was the newest, instead of the
one bundled with the Cygwin/MinGW installer. It probably really doesn't even
matter if I figured it out on Cygwin first, that would have been fine. The
important thing is close-enough to be compatible and host the app. Knowledge is
transferable, because most knowledge is bunched up around Python and vim.

--------------------------------------------------------------------------------
## Mon Nov 17 12:55:32 EST 2014

It's very refreshing to not have to worry about SSH sessions timing out. But
I'm on a Windows machine in vim doing Python work. Imagine that. As much as I
love the Raspberry Pi, I have to adjust my "what I'm all about" to be more
about Linux-light, Python, vim and git. MinGW seems to be plenty of Unixy like
stuff to keep things chugging along. But that script I wrote to publish from
git to WordPress will probably be an example of something that relies a little
more heavily on an actual Bash shell. Get a tiny little follow-on from last
Friday's work done before jumping head-first into client work. Working more
intelligently is what this is all about. And with the amount that SEO has
changed, is changing, and will continue to change, it's really these things
about my daily work-flow that make all the difference. I'm different. But I
have to be different, effective, and still able to communicate well. And so...

1, 2, 3... 1? Been awhile since I've used that technique. Anyone who has read
my prior daily work journals will be used to seeing that technique all over the
place. You always have to start with the first step. And so, you think through
your next 3 steps and tackle step 1. You're always at step 1.

1. Research Flask Sessions VERY QUICKLY. Okay, get over the hangup of having to
do a YouTube video for EVERY edit. This journal in particular should get you
over that. Think out loud here, and it will serve much the same function. 

Okay, done. That's where I should have been on Friday. Do a commit. But I think
don't push. Try to do pushes when a journal entry gets to a natural cut-point.

Mon Nov 17 16:04:04 EST 2014
It's taking some time to massage all the permission stuff into place, but I'm
getting there. 

Mon Nov 17 17:30:18 EST 2014
Yep, definitely helps me keep track of time pretty well. It's also quite clear
I'll be needing to maintain multiple journals--this one and one where I can
name clients by name and the actual issues. At any rate, I'm getting close to a
good commit-and-push point because I finally just got all the scopes right (I
think) to let the Pipulate app work on spreadsheets.

--------------------------------------------------------------------------------
## Mon Nov 17 10:43:32 EST 2014

This is the second daily work journal entry in the same day. What I do is
simply hit the keyboard shortcut: @j, which does all the date insertion and
cursor positioning and markdown formatting so that I can just start typing.
This is something I innovated for myself when I first started using Mercurial
(hg) and later git for my daily work journal--at least on-and-off. It is
continually so tempting to use Google Docs for this purpose, because obviously
it is a more natural writing environment--a real word processor. However, since
committing to vim as my text editor / development environment, I've been
looking for reasons to "be in vim" more often than normal day-to-day agency
life allows. It will look like coding to my co-workers, but it is not coding.
They will even be able to see it through github.

But whereas I had extreme granular permission control over who sees my journal
entries and how under Google Docs (I could start them in a shared or non-shared
location) so that only myself (and perhaps Google) can read them, or so that my
whole team can read them. I've begun to get into that habit here, having almost
every day accounted for. But it's not WHERE every day is accounted for so much as
THAT every day is accounted for. If some future data-mining artificial
intelligence went accounting for my days in the future, if it were in Google
Docs, it may or may not be able to access it, based on permissions and whether
I even published the publish-able, which I usually don't. But when I do, I
publish it on a WordPress site hosted at MikeLev.in, which may or may not be
there and accessible in the future. I may as well give this daily work journal
the same advantages as everything else that ends up in git, and github in
particular. Systems like archive.org and everything else mining public
information will essentially immortalize my daily work journal. Hello World.

So, what next and why? That is the question. Well, it's all about client work.
But it's also about forging the most intelligent way forward possible so that
these next years at Flying Point Digital are as enjoyable and profitable and
contributing to my daughter's education as possible. That means financially
rewarding enough to travel and delegate my work here. The pouring forth of my
online presence will mostly be through here (github) and my YouTube videos.
That is very appropriate, I think. I will probably also use that utility I
wrote that lets me easily publish TO WordPress from GitHub. There's a lot more
I could do with that which I haven't been--but I should, given my recent
activities, and the fact that I already did the difficult work.

It's already noon! Okay, doing these automatic date-stamps as part of the daily
journal entries is going to help a lot too in terms of keeping me aware of
time. It's also going to help me deal with a lot of other related issues, like
maintaining focus in a world and a business where so much of our work is done
on the Internet through Web browsers, but the Web is in itself such a
distraction--especially with all these notification systems competing for our
attention. The trick is to use this daily journal in a plain old text file in
vim natively on my machine as my main go-to point throughout the day. I detect
the top-item to-do list going to have to end up at the top of this document.
Although of course I'm going to be sanitizing out actual client names as I go
so that everything remains publish-able.

--------------------------------------------------------------------------------
## Mon Nov 17 09:20:04 EST 2014

Dear daily work journal inside my github repository for the Pipulate project. I
just made this file, journal.txt. It's a pretty big deal to me where I keep my
daily journal, for it makes all sorts of decisions automatic, like whether, how
and where it gets published. By actually putting IN the repository for a free
and open source project on github, it will by definition get automatically
published every time I update it, commit changes on this file, and push. And
so, by making this my default first daily work journal location, I am putting
this "task" in charge of all other tasks--including my day-to-day work for
clients and such. And that's a good thing, because my effectiveness here is not
just as another SEO Microsoft Office suite jockey (Powerpoint, Word, email,
etc.) but rather it is in my ability to think different than others and act on
those differences to produce more and different and better results than others
in my field. Ultimately, my effectiveness in the field itself including
whatever it transforms into will be determined by my ability to think and act
better than others.

Okay, some of the things that have to change now are ensuring that my vim
environment is pretty much the same on all of the machines I sit down to work
out. I no longer am logging into some Rackspace or Raspberry Pi server to do my
work through SSH to some remote server (even if the server is sitting next to
me). Instead, I am getting my Linux / Python / vim and git environment right on
the machine I'm working on so that my web development address is localhost.
I've tried to avoid this for some time, but ultimately, it's better to not have
to log into some remote machine. It's even the way git was envisioned by Linus
Torvalds who figured he might want to see who fixed a bug at 30 thousand feet.
See? Linus didn't want to rely on that full-time connection to the Internet
just to do his thing. In today's world of mash-ups, it seems pretty far fetched
to do all your development work locally without an Internet connection, but
even in the case of Pipulate, all you need is a locally running webserver to
simulate the serving of some site on the Web, and using the csv-file interface
to Pipulate instead of the Google Docs interface, and development is totally
possible. I'd have to make access to JQuery, JQuery Mobile and any other
JavaScript libraries that I rely on local, but no big deal. Dev work on
Pipulate disconnected from the Internet is possible, and I should embrace that.

What's further, I should talk as freely as I can about the development of the
Pipulate project in a way that's just as high-profile, exposed and compelling
as those YouTube videos I do on Friday while I'm coding and while I'm walking
my dog in the morning on days I'm not coding. Doing journal entries here in the
repository keeps my mind where it should be--on what I'm doing with this
project and this code. It keeps me practicing vim constantly, and it makes
issues surrounding Pipulate "parent" to even issues surrounding my employers
(and by extension, MY) clients. But there's no problem that my clients face
that aren't specific instances of the types of larger general problems in the
industry that I'm designing Pipulate to address--and ultimately, let us help
our clients fix... and then train them to KEEP those things fixed, so they
don't keep popping out-of-whack. Pipulate is a little bit of a Swiss Army Knife
of SEO & Social tools that can be used on a case-by-case basis in order to do
special investigations (like keyword builds and the like), or it can be the
scheduled and distributed workhorse doing position and popularity monitoring,
distilling down the data into actionable next-step recommendations.

In other words, Pipulate is going to ROCK the SEO and Social worlds--not only
insofar as it will replace other much more expensive tools, but also in how it
will allow you to work with other Pipulators to create circles of private
collaborators to allow you to use each other as (respectfully) as private proxy
servers to distribute monitoring traffic and processing jobs. In yet more other
words, Pipulate will provide a lot of those abilities previously reserved for
only the most advanced technical Kung Fu gurus to the average (yet, slightly
still ambitious) marketer and wanna-be programmer. Pipulate provides a
framework to a large number of the fairly advanced monitoring and
service-interaction tasks you can imagine, while still not calling on you to do
that much programming directly yourself--until the time comes that you do. It's
a lot like that day you try your hand at Excel macros, but instead of such
silly throw-away work as macros within obsolescencing office software, you will
be trying your hand at the actual awesome Python Programming language. I plan
on Pipulate being a gateway drug to programming.

